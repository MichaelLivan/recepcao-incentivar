#!/usr/bin/env python3
"""
Script de diagn√≥stico para problemas de conex√£o com banco de dados
"""

import os
import socket
import requests
import time
from urllib.parse import urlparse

def test_network_connectivity():
    """Testa conectividade b√°sica de rede"""
    print("üîç DIAGN√ìSTICO DE CONECTIVIDADE")
    print("=" * 50)
    
    # Teste 1: DNS b√°sico
    try:
        print("1. Testando DNS para google.com...")
        socket.gethostbyname('google.com')
        print("   ‚úÖ DNS funcionando")
    except socket.gaierror as e:
        print(f"   ‚ùå Erro de DNS: {e}")
        return False
    
    # Teste 2: Conectividade HTTP
    try:
        print("2. Testando HTTP para google.com...")
        response = requests.get('https://www.google.com', timeout=10)
        print(f"   ‚úÖ HTTP funcionando (Status: {response.status_code})")
    except Exception as e:
        print(f"   ‚ùå Erro HTTP: {e}")
        return False
    
    return True

def test_supabase_connectivity():
    """Testa conectividade espec√≠fica com Supabase"""
    print("\nüèóÔ∏è TESTE ESPEC√çFICO SUPABASE")
    print("=" * 50)
    
    # Verificar vari√°veis de ambiente
    supabase_url = os.environ.get('SUPABASE_URL')
    supabase_key = os.environ.get('SUPABASE_KEY')
    
    print(f"SUPABASE_URL: {supabase_url[:50]}..." if supabase_url else "‚ùå SUPABASE_URL n√£o definida")
    print(f"SUPABASE_KEY: {supabase_key[:20]}..." if supabase_key else "‚ùå SUPABASE_KEY n√£o definida")
    
    if not supabase_url or not supabase_key:
        print("\n‚ùå Vari√°veis de ambiente n√£o configuradas!")
        return False
    
    # Teste de DNS para o Supabase
    try:
        parsed_url = urlparse(supabase_url)
        hostname = parsed_url.hostname
        print(f"\n3. Testando DNS para {hostname}...")
        ip = socket.gethostbyname(hostname)
        print(f"   ‚úÖ DNS resolvido: {hostname} -> {ip}")
    except socket.gaierror as e:
        print(f"   ‚ùå Erro DNS Supabase: {e}")
        return False
    
    # Teste HTTP para Supabase
    try:
        print("4. Testando HTTP para Supabase...")
        headers = {
            'apikey': supabase_key,
            'Authorization': f'Bearer {supabase_key}',
            'Content-Type': 'application/json'
        }
        
        # Teste simples de health check
        response = requests.get(f"{supabase_url}/rest/v1/", headers=headers, timeout=30)
        print(f"   ‚úÖ Supabase respondeu (Status: {response.status_code})")
        
        if response.status_code == 200:
            print("   ‚úÖ Autentica√ß√£o com Supabase OK")
        else:
            print(f"   ‚ö†Ô∏è Status inesperado: {response.status_code}")
            print(f"   Response: {response.text[:200]}")
        
    except requests.exceptions.Timeout:
        print("   ‚ùå Timeout na conex√£o com Supabase")
        return False
    except requests.exceptions.ConnectionError as e:
        print(f"   ‚ùå Erro de conex√£o: {e}")
        return False
    except Exception as e:
        print(f"   ‚ùå Erro HTTP Supabase: {e}")
        return False
    
    return True

def test_supabase_table_access():
    """Testa acesso espec√≠fico √†s tabelas"""
    print("\nüìã TESTE DE ACESSO √ÄS TABELAS")
    print("=" * 50)
    
    supabase_url = os.environ.get('SUPABASE_URL')
    supabase_key = os.environ.get('SUPABASE_KEY')
    
    if not supabase_url or not supabase_key:
        print("‚ùå Credenciais n√£o dispon√≠veis")
        return False
    
    headers = {
        'apikey': supabase_key,
        'Authorization': f'Bearer {supabase_key}',
        'Content-Type': 'application/json'
    }
    
    tables_to_test = ['usuarios', 'salas', 'orcamentos']
    
    for table in tables_to_test:
        try:
            print(f"5. Testando acesso √† tabela '{table}'...")
            response = requests.get(
                f"{supabase_url}/rest/v1/{table}?select=*&limit=1",
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ Tabela '{table}' acess√≠vel ({len(data)} registros encontrados)")
            else:
                print(f"   ‚ùå Erro ao acessar '{table}': Status {response.status_code}")
                print(f"   Response: {response.text[:200]}")
                
        except Exception as e:
            print(f"   ‚ùå Erro ao acessar tabela '{table}': {e}")
    
    return True

def suggest_solutions():
    """Sugere solu√ß√µes baseadas nos testes"""
    print("\nüí° POSS√çVEIS SOLU√á√ïES")
    print("=" * 50)
    
    print("1. Verificar vari√°veis de ambiente:")
    print("   - SUPABASE_URL deve estar no formato: https://xxx.supabase.co")
    print("   - SUPABASE_KEY deve ser a chave anon/service_role")
    
    print("\n2. Verificar conectividade:")
    print("   - Testar conex√£o em rede diferente")
    print("   - Verificar firewall/proxy corporativo")
    print("   - Testar VPN se dispon√≠vel")
    
    print("\n3. Verificar configura√ß√£o Supabase:")
    print("   - Confirmar URL no dashboard Supabase")
    print("   - Regenerar chaves se necess√°rio")
    print("   - Verificar RLS (Row Level Security)")
    
    print("\n4. Configura√ß√µes alternativas:")
    print("   - Aumentar timeout de conex√£o")
    print("   - Usar DNS p√∫blico (8.8.8.8)")
    print("   - Testar em ambiente Docker")

if __name__ == "__main__":
    print("üöÄ DIAGN√ìSTICO DE CONEX√ÉO COM BANCO DE DADOS")
    print("=" * 60)
    
    # Execu√ß√£o dos testes
    network_ok = test_network_connectivity()
    
    if network_ok:
        supabase_ok = test_supabase_connectivity()
        if supabase_ok:
            test_supabase_table_access()
    
    # Sugest√µes
    suggest_solutions()
    
    print("\n" + "=" * 60)
    print("üìù Diagn√≥stico completo. Execute com as credenciais corretas.")